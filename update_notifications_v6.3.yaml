blueprint:
  name: "Update Notifications (V6-Plus — multi-device, manual run, backup, diagnostics)"
  description: >
    Notifikationer for update.*-enheder Notifikationer for update.*-enheder (Android/iOS).
    Virker ved manuel kørsel (opsummer nu), understøtter flere mobile_app-enheder,
    diagnose-log til fejlfinding.
  domain: automation
  source_url: https://example.invalid/bukart/update_notifications_v6_plus.yaml

  input:
    update_entities:
      name: Update entities
      description: Vælg de update.* enheder der skal overvåges
      selector:
        entity:
          domain: update
          multiple: true

    notify_devices:
      name: Devices Notified (1+)
      description: Vælg én eller flere mobile_app-enheder (telefoner) som skal modtage notifikationer
      default: []
      selector:
        device:
          filter:
            - integration: mobile_app
          multiple: true

    send_to_ha:
      name: Også som HA persistent notification
      default: false
      selector:
        boolean: {}

    only_after:
      name: Kun efter (valgfrit)
      selector:
        time: {}
      default: "00:00:00"

    only_before:
      name: Kun før (valgfrit)
      selector:
        time: {}
      default: "23:59:59"

    diag_enable:
      name: Diagnose-log (aktivér)
      description: Skriv detaljer til systemlog/logbook og (valgfrit) fire et custom event
      default: true
      selector:
        boolean: {}

    diag_level:
      name: Diagnose-niveau
      default: info
      selector:
        select:
          options:
            - info
            - warning
            - error

    diag_fire_event:
      name: Fire et custom diag-event
      description: Udløs eventet "update_notifications.diagnostics" med payload
      default: false
      selector:
        boolean: {}

mode: parallel
max: 100

variables:
  _update_entities: !input update_entities
  _send_to_ha: !input send_to_ha
  _only_after: !input only_after
  _only_before: !input only_before
  _diag_enable: !input diag_enable
  _diag_level: !input diag_level
  _diag_fire_event: !input diag_fire_event

  updates_on: >-
    {{
      expand(_update_entities)
        | selectattr('state','eq','on')
        | map(attribute='entity_id')
        | list
    }}

trigger:
  - id: started
    platform: state
    entity_id: !input update_entities
    from: "off"
    to: "on"

  - id: cleared
    platform: state
    entity_id: !input update_entities
    to: "off"

  - id: sticky_ios
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: URI

condition: []

action:
  - choose:

      # — Diagnose helper (brug via *DIAG_HELPER) —
      - conditions: "{{ false }}"
        sequence: &DIAG_HELPER
          - if: "{{ _diag_enable }}"
            then:
              - variables:
                  _msg: "{{ diag_message | default('') }}"
              - choose:
                  - conditions: "{{ _diag_level == 'info' }}"
                    sequence:
                      - service: system_log.write
                        data:
                          level: info
                          message: "{{ _msg }}"
                  - conditions: "{{ _diag_level == 'warning' }}"
                    sequence:
                      - service: system_log.write
                        data:
                          level: warning
                          message: "{{ _msg }}"
                  - conditions: "{{ _diag_level == 'error' }}"
                    sequence:
                      - service: system_log.write
                        data:
                          level: error
                          message: "{{ _msg }}"
              - if: "{{ _diag_fire_event }}"
                then:
                  - event: update_notifications.diagnostics
                    event_data:
                      message: "{{ _msg }}"

      # — Started -> send notifikation(er) —
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'started' }}"
        sequence:
          - variables:
              diag_message: "[started] updates_on={{ updates_on | count }}"
          - parallel:
              - sequence: *DIAG_HELPER
              - sequence:
                  - if: "{{ updates_on | count > 0 }}"
                    then:
                      - condition: time
                        after: !input only_after
                        before: !input only_before
                      - repeat:
                          for_each: !input notify_devices
                          sequence:
                            - variables:
                                notify_service: "{{ 'notify.mobile_app_' ~ (device_attr(repeat.item,'name') | slugify) }}"
                                dm2: "[notify] {{ notify_service }} (started)"
                            - service: "{{ notify_service }}"
                              data:
                                message: "Opdateringer tilgængelige ({{ updates_on | count }})"
                                data:
                                  ttl: 0
                                  priority: high
                                  sticky: "true"
                                  actions:
                                    - action: "URI"
                                      title: "Åbn opdateringer"
                                      uri: "app://navigate/update"
                                  tag: update_started
                                  channel: Updates
                                  group: Updates
                            - variables:
                                diag_message: "{{ dm2 }}"
                            - sequence: *DIAG_HELPER
              - sequence:
                  - if: "{{ _send_to_ha }}"
                    then:
                      - service: persistent_notification.create
                        data:
                          notification_id: "update_started"
                          title: "Opdateringer tilgængelige ({{ updates_on | count }})"
                          message: >-
                            {{ updates_on
                                | map('replace','update.','')
                                | map('regex_replace','^','- ')
                                | join('\n') }}

      # — CLEARED (når en opdatering slår fra) —
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'cleared' }}"
        sequence:
          - variables:
              entity_id: "{{ trigger.entity_id }}"
              diag_message: "[cleared] {{ entity_id }}"
          - parallel:
              - sequence: *DIAG_HELPER
              - sequence:
                  - if: "{{ _send_to_ha }}"
                    then:
                      - service: persistent_notification.create
                        data:
                          notification_id: "{{ entity_id | replace('update.','') }}"
                          title: "{{ state_attr(entity_id, 'friendly_name') }}"
                          message: >-
                            {% set summary = state_attr(entity_id, 'release_summary') %}
                            Nyeste: {{ state_attr(entity_id, 'latest_version') }}
                            \nInstalleret: {{ state_attr(entity_id, 'installed_version') }}
                            {{ '\n' ~ summary if summary is string }}

      # — MANUEL RUN (opsummer nu) —
      - conditions:
          - condition: template
            value_template: "{{ trigger is not defined or trigger == none }}"
        sequence:
          - variables:
              diag_message: "[manual] opsummer nu; updates_on={{ updates_on | count }}"
          - parallel:
              - sequence: *DIAG_HELPER
              - sequence:
                  - if: "{{ updates_on | count > 0 }}"
                    then:
                      - condition: time
                        after: !input only_after
                        before: !input only_before
                      - repeat:
                          for_each: !input notify_devices
                          sequence:
                            - variables:
                                notify_service: "{{ 'notify.mobile_app_' ~ (device_attr(repeat.item,'name') | slugify) }}"
                                dm2: "[notify] {{ notify_service }} (manual)"
                            - service: "{{ notify_service }}"
                              data:
                                message: "Opdateringer tilgængelige ({{ updates_on | count }})"
                                data:
                                  ttl: 0
                                  priority: high
                                  sticky: "true"
                                  actions:
                                    - action: "URI"
                                      title: "Åbn opdateringer"
                                      uri: "app://navigate/update"
                                  tag: update_manual
                                  channel: Updates
                                  group: Updates
                            - variables:
                                diag_message: "{{ dm2 }}"
                            - sequence: *DIAG_HELPER
              - sequence:
                  - if: "{{ _send_to_ha }}"
                    then:
                      - service: persistent_notification.create
                        data:
                          notification_id: update_manual
                          title: "Opdateringer tilgængelige ({{ updates_on | count }})"
                          message: >-
                            {{ updates_on
                                | map('replace','update.','')
                                | map('regex_replace','^','- ')
                                | join('\n') }}
